{"version":3,"sources":["components/Error.js","components/Formulario.js","components/Imagen.js","components/ListadoImagen.js","App.js","serviceWorker.js","index.js"],"names":["Error","message","className","Formulario","setSearch","useState","searchinput","setSearchinput","error","setError","onSubmit","e","preventDefault","trim","type","placeholder","onChange","target","value","Imagen","image","largeImageURL","likes","previewURL","tags","views","src","alt","href","rel","ListadoImagen","images","map","key","id","App","search","setImages","paginaactual","setPaginaactual","totalpaginas","setTotalpaginas","useEffect","a","imagenesPorPagina","url","fetch","respuesta","json","resultado","hits","Math","ceil","totalHits","document","querySelector","scrollIntoView","behavior","consultaApi","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.1d51665c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Error = ({message}) => {\n  return ( \n  <p className=\"my-3 p4 text-center alert alert-danger\">{message}</p>\n   );\n}\n \nexport default Error;","import React, {useState} from 'react';\nimport Error from './Error'\n\nconst Formulario = ({setSearch}) => {\n  const[searchinput, setSearchinput] =useState(\"\")\n  const[error, setError]= useState(false)\n\n  const searchImage = e =>{\n    e.preventDefault()\n\n    //validar\n    if(searchinput.trim() ===''){\n      setError(true)\n      return\n    }\n    setError(false)\n    //enviar a componente principal\n    setSearch(searchinput)\n  }\n  return ( \n    <form\n      onSubmit={searchImage}\n    >\n      <div className=\"row\">\n        <div className =\"form-group col-md-8\">\n          <input\n            type=\"text\"\n            className=\"form-control form-control-lg\"\n            placeholder=\"Search an image: football, coffee...\"\n            onChange={e=> setSearchinput(e.target.value)}\n          />\n        </div>\n        <div className=\"form-group col-md-4\">\n          <input\n            type=\"submit\"\n            className=\"btn btn-lg btn-danger btn-block\"\n            value=\"Search\"\n          />\n        </div>\n      </div>\n      {error ? <Error message=\"You must fill in the search bar to search\"/> : null}\n    </form>\n   );\n}\n \nexport default Formulario;","import React from 'react';\n\nconst Imagen = ({image}) => {\n  const { largeImageURL, likes, previewURL, tags, views} = image\n  return ( \n    <div className=\" col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\n      <div className=\"card\">\n        <img src={previewURL} alt={tags} className=\"card-img-top\"/>\n      </div>\n      <div className=\"card-body\">\n        <p className=\"card-text\">{likes} Likes </p>\n        <p className=\"card-text\">{views} Views </p>\n      </div>\n      <div className=\"card-footer\">\n        <a \n          href={largeImageURL} \n          target=\"_blank\" \n          rel=\"noopener noreferrer\" \n          className=\"btn btn-primary btn-block\" \n          >View Image</a>\n      </div>\n    </div>\n   );\n}\n \nexport default Imagen;","import React from 'react';\nimport Imagen from './Imagen'\n\nconst ListadoImagen = ({images}) => {\n  return ( \n    <div className=\"col-12 p-5 row\">\n      {images.map(image =>(\n        <Imagen\n        key={image.id}\n        image={image}\n        />\n      ))}\n    </div>\n   );\n}\n \nexport default ListadoImagen;","import React, { useState, useEffect} from 'react';\nimport Formulario from './components/Formulario'\nimport ListodoImagen from './components/ListadoImagen'\n\n\nfunction App() {\n\n  const[search, setSearch] = useState(\"\")\n  const[images, setImages] = useState([])\n  const[paginaactual, setPaginaactual] = useState(1)\n  const[totalpaginas, setTotalpaginas] = useState(1)\n\n  useEffect(()=>{\n    const consultaApi = async () =>{\n      if(search === '') return\n    \n      const imagenesPorPagina = 32;\n      const key = '17968933-8b9fd410c145a9f70c1b97c9f'\n      const url = `https://pixabay.com/api/?key=${key}&q=${search}&per_page=${imagenesPorPagina}&page=${paginaactual}`\n      \n      const respuesta = await fetch(url)\n      const resultado = await respuesta.json()\n      setImages(resultado.hits)\n\n      setTotalpaginas(Math.ceil(resultado.totalHits / imagenesPorPagina))\n      \n      //volver hacia arriba a cargar nueva pagina\n      const top = document.querySelector('.jumbotron')\n      top.scrollIntoView({behavior:\"smooth\"})\n    }\n    consultaApi()\n  },[search, paginaactual])\n\n  //definir pagina anterior\n\n  const pagiaAnterior = () => {\n\n    const nuevaPaginaActual = paginaactual - 1\n    if (paginaactual === 1) return\n    setPaginaactual(nuevaPaginaActual)\n   \n  }\n  const paginaSiguente = () => {\n\n    const nuevaPaginaActual = paginaactual + 1\n    if (paginaactual === totalpaginas) return\n    setPaginaactual(nuevaPaginaActual)\n    \n  }\n\n  return (\n    \n    <div className=\"container\">\n      <div className=\"jumbotron\">\n        <p className=\"lead text-center \">Search Image</p>\n         <Formulario\n          setSearch={setSearch}\n         />\n      </div>\n      <div className=\"row justify-content-center\">\n         <ListodoImagen\n          images = {images}\n         />\n         {(paginaactual !== 1)?\n         <button\n          type=\"button\"\n          className=\"btn btn-info mr1\"\n          onClick={pagiaAnterior}\n        >&laquo; Previous</button>\n        :null\n         }\n         {(paginaactual !== totalpaginas)?\n        <button\n          type=\"button\"\n          className=\"btn btn-info\"\n          onClick={paginaSiguente}\n        >Next &raquo;</button>\n        :null\n         }\n      </div>\n    </div>\n\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}